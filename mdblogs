#!/bin/bash

# ====== CONFIG ======
folderToProcess=('ts' 'rust' 'react')
buildDir=".build"
buildPortfolioDir="portfolio"
AWS_BUCKET_NAME="blogs-mdbooks" # Set your bucket name here

# ====== FUNCTIONS ======

buildPortfolio() {
    echo ""
    echo "üì¶ Building portfolio..."
    if [ ! -d "$buildPortfolioDir" ]; then
        echo "‚ùå Portfolio directory not found: $buildPortfolioDir"
        return 1
    fi

    cd "$buildPortfolioDir" || return 1

    # Check if package.json exists
    if [ ! -f "package.json" ]; then
        echo "‚ùå No package.json found in $buildPortfolioDir"
        cd - >/dev/null || return 1
        return 1
    fi

    echo "üì¶ Installing dependencies..."
    npm install || {
        echo "‚ùå npm install failed"
        cd - >/dev/null || return 1
        return 1
    }

    echo "üî® Building portfolio..."
    npm run build || {
        echo "‚ùå npm run build failed"
        cd - >/dev/null || return 1
        return 1
    }

    # Check if build output exists
    if [ ! -d "dist" ]; then
        echo "‚ùå Build output 'dist' directory not found"
        cd - >/dev/null || return 1
        return 1
    fi

    mkdir -p "../$buildDir/$buildPortfolioDir"
    rsync -a dist/ "../$buildDir/$buildPortfolioDir/" || {
        echo "‚ùå Failed to copy portfolio build output"
        cd - >/dev/null || return 1
        return 1
    }

    cd - >/dev/null || return 1
    echo "‚úÖ Portfolio build complete."
    return 0
}

buildDocs() {
    local folder="$1"
    if [ ! -d "$folder" ]; then
        echo "‚ö† Skipping: $folder (not found)"
        return 0
    fi

    echo "üìö Building mdBook: $folder"
    cd "$folder" || return 1

    # Check if book.toml exists
    if [ ! -f "book.toml" ]; then
        echo "‚ùå No book.toml found in $folder"
        cd - >/dev/null || return 1
        return 1
    fi

    mdbook build || {
        echo "‚ùå mdbook build failed for $folder"
        cd - >/dev/null || return 1
        return 1
    }

    mkdir -p "../$buildDir/$folder"
    rsync -a book/ "../$buildDir/$folder/" || {
        echo "‚ùå Failed to copy $folder build output"
        cd - >/dev/null || return 1
        return 1
    }

    cd - >/dev/null || return 1
    echo "‚úÖ $folder build complete."
    return 0
}

buildDocsOnly() {
    echo "üî® Building mdBooks only..."
    rm -rf "$buildDir"
    mkdir -p "$buildDir"

    local build_failed=0
    for item in "${folderToProcess[@]}"; do
        if ! buildDocs "$item"; then
            build_failed=1
        fi
    done

    if [ $build_failed -eq 0 ]; then
        echo "‚úÖ All mdBook builds complete. Output in $buildDir"
    else
        echo "‚ùå Some mdBook builds failed."
        return 1
    fi
}

buildPortfolioOnly() {
    echo "üî® Building portfolio only..."
    rm -rf "$buildDir"
    mkdir -p "$buildDir"

    if buildPortfolio; then
        echo "‚úÖ Portfolio build complete. Output in $buildDir"
    else
        echo "‚ùå Portfolio build failed."
        return 1
    fi
}

buildAll() {
    echo "üî® Building everything..."
    rm -rf "$buildDir"
    mkdir -p "$buildDir"

    local build_failed=0

    # Build portfolio
    if ! buildPortfolio; then
        build_failed=1
    fi

    # Build all mdBooks
    for item in "${folderToProcess[@]}"; do
        if ! buildDocs "$item"; then
            build_failed=1
        fi
    done

    if [ $build_failed -eq 0 ]; then
        echo "‚úÖ All builds complete. Output in $buildDir"
    else
        echo "‚ùå Some builds failed."
        return 1
    fi
}

golive() {
    echo "üöÄ Deploying to S3 with checksum validation..."

    if [ ! -d "$buildDir" ]; then
        echo "‚ùå Build directory not found: $buildDir"
        echo "üí° Run 'build' or 'buildall' first to create the build."
        return 1
    fi

    if ! aws sts get-caller-identity &>/dev/null; then
        echo "‚ùå AWS credentials not configured! Run 'aws configure'"
        return 1
    fi

    local total_files=0 uploaded_files=0 skipped_files=0 upload_failures=0

    echo "üìÅ Scanning files in $buildDir..."
    while IFS= read -r -d '' file; do
        total_files=$((total_files + 1))
        local rel_path="${file#$buildDir/}"
        local local_md5
        local_md5=$(md5sum "$file" | awk '{print $1}')

        # Get remote ETag/MD5 (strip quotes)
        local remote_md5
        remote_md5=$(aws s3api head-object \
            --bucket "$AWS_BUCKET_NAME" \
            --key "$rel_path" \
            --query ETag \
            --output text 2>/dev/null | tr -d '"')

        if [[ "$local_md5" != "$remote_md5" ]]; then
            echo "‚¨Ü Uploading: $rel_path"
            if aws s3 cp "$file" "s3://$AWS_BUCKET_NAME/$rel_path"; then
                uploaded_files=$((uploaded_files + 1))
            else
                echo "‚ùå Failed to upload: $rel_path"
                upload_failures=$((upload_failures + 1))
            fi
        else
            echo "‚úÖ Up-to-date: $rel_path"
            skipped_files=$((skipped_files + 1))
        fi
    done < <(find "$buildDir" -type f -print0)

    echo ""
    echo "üìä Deployment Summary:"
    echo "   Total files checked: $total_files"
    echo "   Uploaded: $uploaded_files"
    echo "   Skipped (up-to-date): $skipped_files"
    echo "   Failures: $upload_failures"

    if [ "$upload_failures" -eq 0 ]; then
        echo "üéâ Deployment complete with all files verified."
    else
        echo "‚ö† Some files failed to upload."
        return 1
    fi
}

checkHealth() {
    local status=0
    local required_cmds=("mdbook" "rsync" "aws" "npm" "md5sum")

    echo "üîç Checking required utilities..."
    for cmd in "${required_cmds[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            echo "‚ùå Missing: $cmd"
            status=1
        else
            echo "‚úÖ Found: $cmd"
        fi
    done

    echo ""
    echo "üîç Checking project structure..."

    # Check portfolio directory
    if [ -d "$buildPortfolioDir" ]; then
        echo "‚úÖ Portfolio directory found: $buildPortfolioDir"
        if [ -f "$buildPortfolioDir/package.json" ]; then
            echo "‚úÖ Portfolio package.json found"
        else
            echo "‚ö† Portfolio package.json not found"
        fi
    else
        echo "‚ö† Portfolio directory not found: $buildPortfolioDir"
    fi

    # Check mdBook directories
    for folder in "${folderToProcess[@]}"; do
        if [ -d "$folder" ]; then
            echo "‚úÖ mdBook directory found: $folder"
            if [ -f "$folder/book.toml" ]; then
                echo "‚úÖ book.toml found in $folder"
            else
                echo "‚ùå book.toml not found in $folder"
                status=1
            fi
        else
            echo "‚ö† mdBook directory not found: $folder"
        fi
    done

    echo ""
    echo "üîç Checking AWS credentials..."
    if aws sts get-caller-identity &>/dev/null; then
        echo "‚úÖ AWS credentials valid."
    else
        echo "‚ùå AWS credentials not configured or invalid."
        status=1
    fi

    if aws s3 ls "s3://$AWS_BUCKET_NAME" &>/dev/null; then
        echo "‚úÖ S3 bucket accessible: $AWS_BUCKET_NAME"
    else
        echo "‚ùå Cannot access S3 bucket: $AWS_BUCKET_NAME"
        status=1
    fi

    return $status
}

showHelp() {
    cat <<EOF
üöÄ Build & Deploy Script

Usage: $0 [command]

Build Commands:
  docs              Build only mdBook projects (${folderToProcess[*]})
  portfolio         Build only portfolio project
  buildall          Build both mdBook projects and portfolio
  
Deploy Commands:
  golive            Deploy to S3 (only upload changed or missing files)
  
Utility Commands:
  --checkhealth     Check dependencies, project structure, and AWS config
  --help            Show this help

Examples:
  $0 buildall       # Build everything
  $0 portfolio      # Build only portfolio
  $0 docs          # Build only mdBooks
  $0 golive        # Deploy to S3

Configuration:
  Portfolio dir: $buildPortfolioDir
  Build output: $buildDir
  S3 bucket: $AWS_BUCKET_NAME
  mdBook folders: ${folderToProcess[*]}

EOF
}

# ====== MAIN ======
case "$1" in
    docs) buildDocsOnly ;;
    portfolio) buildPortfolioOnly ;;
    buildall) buildAll ;;
    golive) golive ;;
    --checkhealth) checkHealth ;;
    --help | "") showHelp ;;
    *)
        echo "‚ùå Unknown command: $1"
        echo ""
        showHelp
        exit 1
        ;;
esac
